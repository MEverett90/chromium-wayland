name: Build Chromium-Wayland x86_64

on: 
  workflow_dispatch:
    inputs:
      cef_branch: 
        description: 'CEF Git Branch'
        required: True
        default: ''
      release: 
        description: 'Release'
        required: false
        default: 'false'


jobs:
  Build-Chromium-Wayland:
    runs-on: [self-hosted, linux]
    env:
      tag_debug:         chromium-wayland-debug-x86_64-${{ inputs.cef_branch }}
      notes_debug:       "Chromium-Wayland Binary Distribution - debug"

    container:
      image: ghcr.io/meta-flutter/meta-flutter/ubuntu-20-chromium-wayland:main
      options:
        --log-driver=none
        --user 1001:1001
        --security-opt label=disable
        --pids-limit=-1
        #--userns keep-id
        #--storage-opt overlay.mount_program=/usr/bin/fuse-overlayfs
        #--storage-opt overlay.mountopt=nodev,metacopy=on,noxattrs=1

    steps:  
      #- uses: actions/checkout@v4
      #  with:
      #    path: ''
      - name: Get Repo
        run: |
          rm -rf chromium-wayland
          git clone https://github.com/MEverett90/chromium-wayland.git
          
      - name: Install packages
        run: |
          mkdir -p code
          mkdir -p code/automate
          mkdir -p code/chromium_git

      - name: Get Depot Tools
        working-directory: code
        run: |
          rm -rf depot_tools
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git

      - name: Create Automation Script
        run: |
          cd code/automate
          rm -rf automate-git.py
          wget https://bitbucket.org/chromiumembedded/cef/raw/${{ inputs.cef_branch }}/tools/automate/automate-git.py

      - name: Run Script
        run: |
          python3 code/automate/automate-git.py --download-dir=code/chromium_git --depot-tools-dir=code/depot_tools --no-distrib --no-build --branch=${{ inputs.cef_branch }} 

      - name: Apply Patch
        working-directory: code/chromium_git/chromium/src
        run: |
          git apply ../../../../chromium-wayland/0001_enable_gl_without_angle.patch          

      - name: Build Debug
        working-directory: code/chromium_git/chromium/src/cef
        run: |
          export PATH=/__w/chromium-wayland/chromium-wayland/code/depot_tools:$PATH
          export GN_DEFINES="use_sysroot=true use_allocator=none symbol_level=2 is_cfi=false use_thin_lto=false use_ozone=true ozone_auto_platforms=false ozone_platform_x11=false ozone_platform_wayland=true use_xkbcommon=true use_gtk=false"
          ./cef_create_projects.sh
          cd ..
          autoninja -C out/Debug_GN_x64 cefsimple chrome_sandbox

      - name: Build Release
        working-directory: code/chromium_git/chromium/src/cef
        run: |
          export PATH=/__w/chromium-wayland/chromium-wayland/code/depot_tools:$PATH
          export GN_DEFINES="use_sysroot=true use_allocator=none symbol_level=1 is_cfi=false use_thin_lto=false use_ozone=true ozone_auto_platforms=false ozone_platform_x11=false ozone_platform_wayland=true use_xkbcommon=true use_gtk=false"
          ./cef_create_projects.sh
          cd ..
          autoninja -C out/Release_GN_x64 cefsimple chrome_sandbox

      - name: Create Binary Distribution
        working-directory: code/chromium_git/chromium/src/out
        run: |
          export PATH=/__w/chromium-wayland/chromium-wayland/code/depot_tools:$PATH
          python3 ../cef/tools/make_distrib.py --output-dir binary_distrib/ --ninja-build true --ozone true --x64-build true --no-docs true
          cd binary_distrib
          tar -czf $tag_debug.tar.gz cef_binary*
          sha256sum -b $tag_debug.tar.gz         > $tag_debug.tar.gz.sha256

      - name: Publish Artifact
        if: ${{ inputs.release != 'true' }}
        uses: actions/upload-artifact@v4
        with:
            name: chromium-wayland-binary-distribution
            path: |
              code/chromium_git/chromium/src/out/binary_distrib/${{ env.tag_debug }}.tar.gz
              code/chromium_git/chromium/src/out/binary_distrib/${{ env.tag_debug }}.tar.gz.sha256

      - name: Release - Publish Release
        if: ${{ inputs.release == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: |
          gh release delete "$tag_debug" --cleanup-tag -y |true
          gh release create --draft "$tag_debug" --title "$tag_debug" --notes "$notes_debug"
          gh release upload "$tag_debug" "$tag_debug.tar.gz" "$tag_debug.tar.gz.sha256"
          gh release edit "$tag_debug" --draft=false
